给定一个含有 n 个正整数的数组和一个正整数 target 。

找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
// class Solution {
//     public int minSubArrayLen(int target, int[] nums) {
//         int left = 0;
//         int right = 0;
//         int minLen = Integer.MAX_VALUE;   // 返回长度最小的子数组
//         int sum = 0;  
//         while (right < nums.length) {
//         	// sum 小于 target 并且没有越界时，右指针右移扩大滑动窗口
//             while (sum < target && right < nums.length) {
//                 sum += nums[right++];
//             }
//             // sum 大于 target 时，表示找到满足条件的子数组，更新最小长度值，左指针右移缩小滑动窗口
//             while (sum >= target) {
//                 minLen = Math.min(minLen, right - left);
//                 sum -= nums[left++];
//             }
//         }
//         return minLen == Integer.MAX_VALUE ? 0 : minLen;
//     }
// }
class Solution {
    public int minSubArrayLen(int target, int[] nums) {
int left=0;
int right=0;
int minLen=Integer.MAX_VALUE;
int sum=0;
while(right<nums.length){
    while(sum<target&&right<nums.length){
    sum+=nums[right++];
}
while(sum>=target){
    minLen=Math.min(minLen,right-left);//一直更新，包证最小
    sum-=nums[left++];
}
}
return minLen==Integer.MAX_VALUE ? 0 : minLen;
    }
}