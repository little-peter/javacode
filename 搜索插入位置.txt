给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。

请必须使用时间复杂度为 O(log n) 的算法。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/search-insert-position
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#### 二分法第二种写法

如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right) 。

那么二分法的边界处理方式则截然不同。

不变量是[left, right)的区间，如下代码可以看出是如何在循环中坚持不变量的。

**大家要仔细看注释，思考为什么要写while (left < right)， 为什么要写right = middle**。
class Solution {
    public int searchInsert(int[] nums, int target) {
int n=nums.length;
int left=0;
int right=n;//定义target在左闭右开的区间里，[left,right),target
while(left<right){//因为left==right的时候，在[left,right)是无效
    int mid=left+(right-left)/2;
if(nums[mid]>target){
    right=mid;
}else if(nums[mid]<target){
    left=mid+1;
}else{
    return mid;
}
//分别处理如下四种情况
//目标值在数组所有元素之前[0,0）
//目标值等于数组中某一个元素 return right即可
//目标值在数组所有元素之后的情况[left,right),return right+1

}
return right;
    }
}
时间复杂度：$O(logn)$
时间复杂度：$O(1)$

## 总结

希望通过这道题目，大家会发现平时写二分法，为什么总写不好，就是因为对区间定义不清楚。

确定要查找的区间到底是左闭右开[left, right)，还是左闭又闭[left, right]，这就是不变量。

然后在**二分查找的循环中，坚持循环不变量的原则**，很多细节问题，自然会知道如何处理了。
class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length;

        // 定义target在左闭右闭的区间，[low, high]
        int low = 0;
        int high = n - 1;

        while (low <= high) { // 当low==high，区间[low, high]依然有效
            int mid = low + (high - low) / 2; // 防止溢出
            if (nums[mid] > target) {
                high = mid - 1; // target 在左区间，所以[low, mid - 1]
            } else if (nums[mid] < target) {
                low = mid + 1; // target 在右区间，所以[mid + 1, high]
            } else {
                // 1. 目标值等于数组中某一个元素  return mid;
                return mid;
            }
        }
        // 2.目标值在数组所有元素之前 3.目标值插入数组中 4.目标值在数组所有元素之后 return right + 1;
        return high + 1;
    }
}