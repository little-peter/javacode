/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 //设交集链表长c,链表1除交集的长度为a，链表2除交集的长度为b，有

   // a + c + b = b + c + a
    //若无交集，则a + b = b + a

 //我们使用两个指针 node1，node2 分别指向两个链表 headA，headB 的头结点，然后同时分别逐结点遍历，当 node1 到达链表 headA 的末尾时，重新定位到链表 headB 的头结点；当 node2 到达链表 headB 的末尾时，重新定位到链表 headA 的头结点。

//这样，当它们相遇时，所指向的结点就是第一个公共结点


public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode n1=headA;
        ListNode n2=headB;
        while(n1!=n2){
            n1=n1==null?headB:n1.next;
            n2=n2==null?headA:n2.next;
        }
        return n1;
    }
}