输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。

要求时间复杂度为O(n)。

输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。

class Solution {
    public int maxSubArray(int[] nums) {
//状态定义：dp[i]表示以nums[i]结尾的连续子数组的最大和
//状态转移方程： dp[i-1]>0,dp[i]=dp[i-1]+nums[i]   dp[i-1]<=0,dp[i]=nums[i]
//初始化：dp[0]=nums[0]

int dp[]=new int[nums.length];
dp[0]=nums[0];
int max=dp[0];
for(int i=1;i<nums.length;i++){
    dp[i]=Math.max(dp[i-1]+nums[i],nums[i]);
    max=Math.max(max,dp[i]);//滚动变量优化
}
return max;
    }
}