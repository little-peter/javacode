class Solution {
    public int maxValue(int[][] grid) {
int m=grid.length,n=grid[0].length;
int []dp=new int[n+1];
//未初始化，0无意义
for(int i=1;i<=m;i++){
for(int j=1;j<=n;j++){
    dp[j]=Math.max(dp[j],dp[j-1])+grid[i-1][j-1];
}
}
return dp[n];
    }
}
// 最基础的dp题，转移方程：

// f(i, j) = max{f(i - 1, j), f(i, j - 1)} + grid[i][j]

// 然后可以用滚动数组的技巧把空间复杂度优化成O(N)

// class Solution {
//     public int maxValue(int[][] grid) {
//         int m = grid.length, n = grid[0].length;
//         int[] dp = new int[n + 1];
//         for (int i = 1; i <= m; i++) {
//             for (int j = 1; j <= n; j++) {
//                 dp[j] = Math.max(dp[j], dp[j - 1]) + grid[i - 1][j - 1];
//             } 
//         }

//         return dp[n];
//     }
// }