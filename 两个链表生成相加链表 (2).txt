
例如：链表 1 为 9->3->7，链表 2 为 6->3，
最后生成新的结果链表为 1->0->0->0
输入：

[9,3,7],[6,3]

返回值：

{1,0,0,0}

说明：

如题面解释  
import java.util.*;

/*
 * public class ListNode {
 *   int val;
 *   ListNode next = null;
 * }
 */

public class Solution {
    /**
     * 
     * @param head1 ListNode类 
     * @param head2 ListNode类 
     * @return ListNode类
     */
    public ListNode addInList (ListNode head1, ListNode head2) {
        // write code here
        //判空
        if(head1==null) return head2;
        if(head2==null) return head1;
        head1=reverse(head1);
        head2=reverse(head2);
        //创建新的链表头节点
        ListNode head=new ListNode(-1);
        ListNode nHead=head;
        int tmp=0;//记录进位的数值
        while(head1!=null||head2!=null){
            //val用来累加此时的数值加数+加数+上一位的进位=当前总的数值
            int val = tmp;
            // 当节点不为空的时候，则需要加上当前节点的值
            if (head1 != null) {
                val += head1.val;
                head1 = head1.next;
            }
            // 当节点不为空的时候，则需要加上当前节点的值
            if (head2 != null) {
                val += head2.val;
                head2 = head2.next;
            }
            // 求出进位
            tmp = val/10;
            // 进位后剩下的数值即为当前节点的数值
            nHead.next = new ListNode(val%10);
            // 下一个节点
            nHead = nHead.next;
 
    }
        // 最后当两条链表都加完的时候，进位不为0的时候，则需要再加上这个进位
        if(tmp > 0){
            nHead.next = new ListNode(tmp);
        }
        // 重新反转回来返回
        return reverse(head.next);
    }
    ListNode reverse(ListNode head){
        if(head==null){
            return head;
        }
        ListNode cur=head;
        ListNode node=null;
        while(cur!=null){
            ListNode tmp=cur.next;
            cur.next=node;
            node=cur;
            cur=tmp;
        }
        return node;
    }
}