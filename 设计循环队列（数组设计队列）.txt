设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。

循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。

你的实现应该支持如下操作：

    MyCircularQueue(k): 构造器，设置队列长度为 k 。
    Front: 从队首获取元素。如果队列为空，返回 -1 。
    Rear: 获取队尾元素。如果队列为空，返回 -1 。
    enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。
    deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。
    isEmpty(): 检查循环队列是否为空。
    isFull(): 检查循环队列是否已满。

//622
class MyCircularQueue {
 //数组实现循环队列
    private int front;
    private int rear;
    private int []elem;
    public MyCircularQueue(int k) {
this.elem=new int[k+1];
this.front=0;
this.rear=0;
    }

    public boolean enQueue(int value) {
if(isFull()){
    return false;
}
//放到数组的rear下标，rear往后走。
        this.elem[this.rear]=value;
this.rear=(this.rear+1)%this.elem.length;
return true;
    }

    public boolean deQueue() {
if(isEmpty()){
    return false;
}
//让他循环起来，因为front加有可能是从后面加
this.front=(this.front+1)%this.elem.length;
return true;
    }

    public int Front() {
        if(isEmpty()){
            return -1;
        }
        //只需要返回front下表元素即可
//        return elem[front];
        int ret=this.elem[front];
        return ret;
    }
//返回队尾元素，注意下标为零时的情况，不能直接rear-1；
    public int Rear() {
        if(isEmpty()){
            return -1;
        }
        int index=-1;
        if(this.rear==0){
           index=this.elem.length-1;
        }else{
            index=this.rear-1;
        }
        return this.elem[index];
    }
//判空
    public boolean isEmpty() {
        return this.front==this.rear;
    }
//判满，条件：(this.rear+1)%elem.length==front
    //我们预留一个位置来判断是否满，防止数组越界
    public boolean isFull() {
        return (this.rear+1)%this.elem.length==this.front;
  }

}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */