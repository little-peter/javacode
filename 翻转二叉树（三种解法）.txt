     4
   /   \
  2     7
 / \   / \
1   3 6   9
  4
   /   \
  7     2
 / \   / \
9   6 3   1
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 /** 
 前序遍历
 //从顶向下交换
class Solution {
    public TreeNode invertTree(TreeNode root) {
if(root==null) return null;
TreeNode rightTree=root.right;
root.right=invertTree(root.left);
root.left=invertTree(rightTree);
return root;
    }
   
}
*/
/*
 public TreeNode invertTree(TreeNode root) {
 if(root==null) return null;
 //后序遍历-- 从下向上交换
 TreeNode leftNode=invertTree(root.left);
 TreeNode rightNode=invertTree(root.right);
 root.right=leftNode;
 root.left=rightNode;
 return root;
    }
     */
class Solution {
    //层序遍历，直接换
    public TreeNode invertTree(TreeNode root) {
if(root==null)return null;
Queue<TreeNode> queue=new LinkedList<>();
queue.offer(root);
while(!queue.isEmpty()){
    TreeNode node=queue.poll();
    TreeNode rightTree=node.right;
    node.right=node.left;
    node.left=rightTree;
    if(node.left!=null){
        queue.offer(node.left);
    }
    if(node.right!=null){
        queue.offer(node.right);
    }
}
return root;
    }
    }