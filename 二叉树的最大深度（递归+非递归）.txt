给定一个二叉树，找出其最大深度。

二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。

说明: 叶子节点是指没有子节点的节点。
  3
   / \
  9  20
    /  \
   15   7
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 /**
 //递归
   public int maxDepth(TreeNode root) {
       return root==null?0:Math.max(maxDepth(root.left),maxDepth(root.right))+1;
    } 
      public int maxDepth(TreeNode root) {
       if(root==null) return 0;
       int l=maxDepth(root.left);
       int r=maxDepth(root.right);
       int depth=Math.max(l,r)+1;
       return depth;
    }
    */
class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
     Queue<TreeNode> queue=new LinkedList<>();
     queue.offer(root);
     int depth=0;
     while(!queue.isEmpty()){
         int size=queue.size();
depth++;
for(int i=0;i<size;i++){
    TreeNode poll=queue.poll();
    if(poll.left!=null){
    queue.offer(poll.left);
}
if(poll.right!=null){
    queue.offer(poll.right);
}
}
     }
     return depth;
    }
}