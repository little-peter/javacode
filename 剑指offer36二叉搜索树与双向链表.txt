输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。
要求不能创建任何新的节点，只能调整树中节点指针的指向。

/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val,Node _left,Node _right) {
        val = _val;
        left = _left;
        right = _right;
    }
};
*/
class Solution {
Node pre,head;
    public Node treeToDoublyList(Node root) {
       if(root==null) return null;
       dfs(root);
       //头尾链接
       head.left=pre;
       pre.right=head;
       return head;      
    }
    void dfs(Node root){//重复过程多，我们用递归来实现中序遍历
    //递归结束条件
    if(root==null) return;
dfs(root.left);

// 如果pre为空，就说明是第一个节点，头结点，然后用head保存头结点，用于之后的返回
if(pre==null){
    head=root;
}else if(pre!=null){
     // 如果不为空，那就说明是中间的节点。并且pre保存的是上一个节点，
        // 让上一个节点的右指针指向当前节点
    pre.right=root;
}
//再让当前节点的左指针指向父节点，也就连成了双向链表
root.left=pre;
pre=root;
dfs(root.right);
    }
}