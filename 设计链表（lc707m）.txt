 
class Node {
	int val;
	Node next;
	public Node(int val) {
		this.val = val;
	}
}
 
class MyLinkedList {
	Node head = null;
	int size = 0;
    public MyLinkedList() {
    }
     // 获取链表中第 index 个节点的值。如果索引无效，则返回-1。
    public int get(int index) {
    	if (index + 1 > size || index < 0) return -1;
    	Node cur = this.head;
    	for (int i = 0; i < index; i ++) {
    		cur = cur.next;
    	}
		return cur.val;
    }
  // 头插
    public void addAtHead(int val) {
    	Node node = new Node(val);
    	if (this.head == null) {
    		this.head = node;
    	} else {
			node.next = this.head;
			this.head = node;
		}
		size++;
    }
     // 尾插
    public void addAtTail(int val) {
    	Node node = new Node(val);
    	if (this.head == null) {
    		this.head = node;
    	} else {
    		Node cur = this.head;
    		while (cur.next != null) {
    			cur = cur.next;
    		}
    		cur.next = node;
    	}
    	size++;
    }
 // index 个节点之前添加值为 val的节点。
    public void addAtIndex(int index, int val) {
    	// index 大于链表长度，节点不插入
    	if (index > size) return;
    	// index小于等于0，则在头部插入节点。
    	if (index <= 0) {
    		addAtHead(val);
    		return;
    	}
    	// 如果 index 等于链表的长度，则该节点将附加到链表的末尾。
    	if (index == size) {
    		addAtTail(val);
    		return;
    	}
    	// 中间位置插入
        Node node = new Node(val);
    	Node prev = head;
    	// prev 找到 要插入位置前一个结点
    	for (int i = 0; i < index - 1; i ++) {
    		prev = prev.next;
    	}
    	node.next = prev.next;
    	prev.next = node;
    	size++;
    } 
    // 删除链表中的第 index 个节点。
    public void deleteAtIndex(int index) {
		if (index > size - 1 || index < 0) return;
		if (index == 0) {
			this.head = this.head.next;
			size--;
			return;
		}
		if (index == size- 1) {
			Node prev = this.head;
			for (int i = 0; i < index- 1; i ++) {
				prev = prev.next;
			}
			prev.next = null;
			size--;
			return;
		}
		
		Node prev = head;
		for (int i = 0; i < index - 1; i ++) {
			prev = prev.next;
		}
		prev.next = prev.next.next;
		size--;
    }
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList obj = new MyLinkedList();
 * int param_1 = obj.get(index);
 * obj.addAtHead(val);
 * obj.addAtTail(val);
 * obj.addAtIndex(index,val);
 * obj.deleteAtIndex(index);
 */