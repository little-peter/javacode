另一棵树的子树
给你两棵二叉树 root 和 subRoot 。检验 root 中是否包含和 subRoot 具有相同结构和节点值的子树。如果存在，返回 true ；否则，返回 false 。

二叉树 tree 的一棵子树包括 tree 的某个节点和这个节点的所有后代节点。tree 也可以看做它自身的一棵子树。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//  个树是另一个树的子树 则

//     要么这两个树相等
//     要么这个树是左树的子树
//     要么这个树hi右树的子树

class Solution {
    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
if(root==null&&subRoot==null){
    return true;
}
if(root==null||subRoot==null){
    return false;
}
return isEqual(root,subRoot)||isSubtree(root.left,subRoot)||isSubtree(root.right,subRoot);
    }
    //判断两树是否相等
    private boolean isEqual(TreeNode l,TreeNode r){
        if(l==null&&r==null) return true;
        if(l==null||r==null) return false;
        if(l.val==r.val){
            return isEqual(l.left,r.left)&&isEqual(l.right,r.right);
        }
        return false;
    }
}