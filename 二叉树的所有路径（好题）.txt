给你一个二叉树的根节点 root ，按 任意顺序 ，返回所有从根节点到叶子节点的路径。

叶子节点 是指没有子节点的节点。
  leetcode257

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*方法二：广度优先搜索
思路与算法
我们也可以用广度优先搜索来实现。我们维护一个队列，存储节点以及根到该节点的路径。一开始这个队列里只有根节点。在每一步迭代中，我们取出队列中的首节点，如果它是叶子节点，则将它对应的路径加入到答案中。如果它不是叶子节点，则将它的所有孩子节点加入到队列的末尾。当队列为空时广度优先搜索结束，我们即能得到答案。
时间复杂度：O(N2)O(N^2)O(N2)，其中 N 表示节点数目。在深度优先搜索中每个节点会被访问一次且只会被访问一次，每一次会对 path 变量进行拷贝构造，时间代价为 O(N)，故时间复杂度为 O(N2)。
code:
 public List<String> binaryTreePaths(TreeNode root) {
List<String> paths=new ArrayList<>();
if(root==null) return paths;
//两个队列
Queue<TreeNode> nodeQueue=new LinkedList<>();
Queue<String> pathQueue=new LinkedList<>();
nodeQueue.offer(root);
pathQueue.offer(Integer.toString(root.val));
while(!nodeQueue.isEmpty()){
    TreeNode node=nodeQueue.poll();
    String path=pathQueue.poll();
    //如果是叶子节点
    if(node.left==null&&node.right==null){
        paths.add(path);
    }else{
        if(node.left!=null){
nodeQueue.offer(node.left);
pathQueue.offer(new StringBuffer(path).append("->").append(node.left.val).toString());
        }
        if(node.right!=null){
nodeQueue.offer(node.right);
pathQueue.offer(new StringBuffer(path).append("->").append(node.right.val).toString());
        }
    }
}
return paths;
    }
 **/
 /*最直观的方法是使用深度优先搜索。在深度优先搜索遍历二叉树时，我们需要考虑当前的节点以及它的孩子节点。

    如果当前节点不是叶子节点，则在当前的路径末尾添加该节点，并继续递归遍历该节点的每一个孩子节点。
    如果当前节点是叶子节点，则在当前路径末尾添加该节点后我们就得到了一条从根节点到叶子节点的路径，将该路径加入到答案即可。
 */
class Solution {
    //深度优先搜索
    public List<String> binaryTreePaths(TreeNode root) {
List<String> paths=new ArrayList<>();
constructPaths(root,"",paths);
return paths;
    }
    public void constructPaths(TreeNode root,String path,List<String> paths){
if(root!=null){//非叶子节点
StringBuffer pathSB=new StringBuffer(path);//对字符串进行操作且不new
pathSB.append(Integer.toString(root.val));
if(root.left==null&&root.right==null){//当前节点是叶子节点
paths.add(pathSB.toString());//加入结果集
}else{//不是叶子节点
pathSB.append("->");//继续递归遍历
constructPaths(root.left,pathSB.toString(),paths);
constructPaths(root.right,pathSB.toString(),paths);
}
}
    }
}
